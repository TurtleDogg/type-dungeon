﻿#include <iostream>
#include <string>
#include <time.h>
#include <stdlib.h> 
#include <thread>
#include <chrono>
#include <algorithm>
#include <cstdlib>

void levelOne(){
    std::string answer;
    int timeToFinish;
    std::cout << "This is level 1." << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(3));
    std::cout << "You enter the dungeon. The first room is dark and dreary, you see vague sillhouettes on the roof - a bat flies at you." << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(5));
    std::cout << "Type 'SLICE' to swing at it with your sword." << std::endl;
    std::chrono::steady_clock::time_point start = std::chrono::steady_clock::now();
    std::cin >> answer;
    std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
    timeToFinish = std::chrono::duration_cast<std::chrono::seconds>(end - start).count();
    std::transform(answer.begin(), answer.end(), answer.begin(), ::tolower);
    if (answer == "slice" and timeToFinish <= 3){
        std::cout << "Level 1 completed. You typed it in " << timeToFinish << " seconds! That's fast." << std::endl;
    }
    else if (answer != "slice"){
        std::cout << "You typed it incorrectly." <<std::endl;
        quick_exit(EXIT_SUCCESS);
    }
    else if (timeToFinish > 3){
        std::cout << "Level 1 failed. You typed it in " << timeToFinish << " seconds. Not fast enough.The bat bites you and infects you with a venomous disease, you die soon after." << std::endl;
        quick_exit(EXIT_SUCCESS);
    }
    
}
void levelTwo(){
    std::string answer;
    int timeToFinish;
    std::cout << "This is level 2." << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(3));
    std::cout << "The bat disappears into dust before the sword makes contact. You walk further into the cave and see a large rusted door. As you walk towards it, you step on a pressure plate and realise it was a trap." << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(5));
    std::cout << "Type 'DODGE_FAST' to dodge the arrow trap." << std::endl;
    std::chrono::steady_clock::time_point start = std::chrono::steady_clock::now();
    std::cin >> answer;
    std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
    timeToFinish = std::chrono::duration_cast<std::chrono::seconds>(end - start).count();
    std::transform(answer.begin(), answer.end(), answer.begin(), ::tolower);
    if (answer == "dodge_fast" and timeToFinish <= 3){
        std::cout << "Level 2 completed. You typed it in " << timeToFinish << " seconds! That's fast. You quickly roll out of the way of the trap." << std::endl;
    }
    else if (answer != "dodge_fast"){
        std::cout << "You typed it incorrectly." <<std::endl;
        quick_exit(EXIT_SUCCESS);
    }
    else if (timeToFinish > 3){
        std::cout << "Level 2 failed. You typed it in " << timeToFinish << " seconds. Not fast enough. The arrows pierce through your body and you die instantly." << std::endl;
        quick_exit(EXIT_SUCCESS);
    }
    
}

void levelThreePartA(){
    std::string answer;
    int timeToFinish;
    std::cout << "This is level 3." << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(3));
    std::cout << "You continue on, you get to a large door - before you open two skeleton warriors burst through it. " << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(5));
    std::cout << "The first skeleton warrior swings his might axe. Type 'PARRY' to parry the blow." << std::endl;
    std::chrono::steady_clock::time_point start = std::chrono::steady_clock::now();
    std::cin >> answer;
    std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
    timeToFinish = std::chrono::duration_cast<std::chrono::seconds>(end - start).count();
    std::transform(answer.begin(), answer.end(), answer.begin(), ::tolower);
    if (answer == "parry" and timeToFinish <= 3){
        std::cout << "You typed it in " << timeToFinish << " seconds! That's fast. You block the axe and slice his bony head clean off." << std::endl;
    }
    else if (answer != "parry"){
        std::cout << "You typed it incorrectly." <<std::endl;
        quick_exit(EXIT_SUCCESS);
    }
    else if (timeToFinish > 3){
        std::cout << "You typed it in " << timeToFinish << " seconds. Not fast enough. The axe severs your body head to toe." << std::endl;
        quick_exit(EXIT_SUCCESS);
    }
}

void levelThreePartB(){
    std::string answer;
    int timeToFinish;
    std::this_thread::sleep_for(std::chrono::seconds(3));
    std::cout << "The second skeleton warrior is caught by surprise and falls on the skull of his comrade, he swings at your feet. Type 'JUMP' to parry the blow." << std::endl;
    std::chrono::steady_clock::time_point start = std::chrono::steady_clock::now();
    std::cin >> answer;
    std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
    timeToFinish = std::chrono::duration_cast<std::chrono::seconds>(end - start).count();
    std::transform(answer.begin(), answer.end(), answer.begin(), ::tolower);
    if (answer == "jump" and timeToFinish <= 3){
        std::cout << "Level 3 completed. You typed it in " << timeToFinish << " seconds! That's fast. You jump to evade the blade and slice your sword into his bony ribcage." << std::endl;
    }
    else if (answer != "jump"){
        std::cout << "You typed it incorrectly." <<std::endl;
        quick_exit(EXIT_SUCCESS);
    }
    else if (timeToFinish > 3){
        std::cout << "Level 3 failed. You typed it in " << timeToFinish << " seconds. Not fast enough. The skeleton slices your foot off and quickly cuts off your head." << std::endl;
        quick_exit(EXIT_SUCCESS);
    }
}

int main()
{
  std::string name;
  std::cout << "This is the typing dungeon. You must type to survive. \nWhat is your name adventurer? ";
  std::cin>>name;
  std::cout << "Hello, " << name << "!\nLets get started.\n";
  levelOne();
  levelTwo();
  levelThreePartA();
  levelThreePartB();
}
